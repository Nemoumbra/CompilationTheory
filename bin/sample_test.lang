func main() {
    declare a: int;
    declare b: int;
    a = 12;
    b = 3;
    print(a + b);
    print(a - b);
    print(a * b);
    print(a / b);
    print(a % b);
    print(a == b);
    print(a != b);
    print(a < b);
    print(a <= b);
    print(a > b);
    print(a >= b);
    if (a > b) {
        print(a);
    } else {
        print(b);
    }

    declare i: int;
    while (i < 4) {
        print(i + 500);
        i = i + 1;
    }
    while (i < 6) {
        declare a: int;
        a = -1;
        print(a);
        i = i + 1;
    }
    print(a);

    // The following code triggers a runtime error (too many iterations)
    // declare j: int;
    // while (1) {
    //     j = 0;
    // }

    // This prints an infinite series of alternating zeroes and ones in C++:
    // int i{};
    // while (i == 0) {
    //     std::cout << i << "\n";
    //     int i = 1;
    //     std::cout << i << "\n";
    // }

    // And this does the same thing for my language:
    // i = 0;
    // while (i == 0) {
    //     print(i);
    //     declare i: int;
    //     i = 1;
    //     print(i);
    // }

    i = 0;
    while (i < 100) {
        if (i == 5) {
            break;
        } else {}
        print(100-i);
        i = i + 1;
    }
    print(i);

    i = 0;
    while (i < 100) {
        i = i + 1;
        if (i < 98) { continue; } else { print(200+i); }
    }

    // Uncomment to get a CE:
    // break;
    // continue;
    // if (0) { break; } else {}
    // if (0) { continue; } else {}
    // if (0) { break; } else { continue; }
    // if (0) { continue; } else { break; }

    // Flow propagation test
    // (the internal loop must not affect the external loop)
    i = 0;
    while (i < 3) {
        declare j: int;
        while (j < 3) {
            break;
        }
        while (j < 3) {
            j = j + 1;
            continue;
        }
        print(-100 + i);
        i = i + 1;
    }
}
