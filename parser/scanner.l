/* Flex lexer file with comments by Nemoumbra */
/* Unfortunately, the comments end up in the scanner.cpp file */
%option noyywrap nounput noinput batch debug
/* These options are hard to explain so far... */

/* Specifies that you want flex to generate a C++ scanner class  */
%option c++

/* This is how we want to class to be called */
%option yyclass="Scanner"

/* This code is pasted after the automaton is defined */
%{
    
    #include <cerrno>
    #include <climits>
    #include <cstdlib>
    #include <cstring> // strerror
    #include <string>
    #include <iostream>
    #include "driver.hh"
    #include "parser.hh"

  // OLD COMMENT: Code definitions at the end of scanner.cpp
  // I guess, someone used to have this code somewhere else...
  // Because this makes no sense...

  // OLD COMMENT: A number symbol corresponding to the value in S.
  yy::parser::symbol_type make_NUMBER(
    const std::string &s,
    const yy::parser::location_type& loc
  );

  // This function is called to get the correct error (and, maybe, debug) messages 
  void Scanner::UpdateLocation() {
    if (driver.location_debug) {
        std::cerr << "Action called " << driver.location << std::endl;
    }
    driver.location.columns(yyleng);
  }

  // OLD COMMENT: Code run each time a pattern is matched.
  #define YY_USER_ACTION UpdateLocation();
%}

/* These are user-defined aliases for regular expressions */
id    [a-zA-Z][a-zA-Z_0-9]*
int   [0-9]+
blank [ \t\r]

/* This starts the token definition section */
%%

%{
  // This code will be pasted into the scanner function 'yylex'
  // In our case that'll be defined as 'ScanToken'

  // OLD COMMENT: A handy shortcut to the location held by the driver.
  yy::location& loc = driver.location;

  if (driver.location_debug) {
    // OLD COMMENT: Code run each time yylex is called.
    std::cerr << "BEFORE " << loc << std::endl;
  }

  // OLD COMMENT: loc.step();
  // Generally, calling this here is a bad idea

  if (driver.location_debug) {
    std::cerr << "AFTER " <<  loc << std::endl;
  }
%}

  /* Note: comments here should be preceded by whitespace chars (I chose tabulation) */
  /* Every token is defined by a regular expression and the code */
  /* we want to run whenever it is matched by our scanner */

{blank}+   {
    if (driver.location_debug) {
        std::cerr << "Blank matched" << std::endl;
    }
    loc.step();
}

\n+ {
    if (driver.location_debug) {
        std::cerr << "EOL called" << std::endl;
    }
    loc.lines(yyleng);
    loc.step();
}

  /* These function are generated by BISON */
"-"        return yy::parser::make_MINUS  (loc);
"+"        return yy::parser::make_PLUS   (loc);
"*"        return yy::parser::make_STAR   (loc);
"/"        return yy::parser::make_SLASH  (loc);
"("        return yy::parser::make_LPAREN (loc);
")"        return yy::parser::make_RPAREN (loc);
":="       return yy::parser::make_ASSIGN (loc);
";"        return yy::parser::make_SEMICOLON(loc);

  /* The next one is a little tricky: it's not the */
  /* 'static symbol_type make_NUMBER (int v, location_type l)' */
  /* made by BISON, this is our function declared above: */
  /* 'yy::parser::symbol_type make_NUMBER(const std::string &s, const yy::parser::location_type& loc)' */
  /* 'yytext' is a pointer to the current symbol in the input file, so we call strtol(s.c_str(), NULL, 10) */
  /* to make an integer from this offset an only then call the bison-made make_NUMBER */
  /* Note: the definition can be found after the %% section */

{int}      return make_NUMBER(yytext, loc);

{id}       {
                if (driver.location_debug) {
                    std::cerr << "ID found " << yytext << std::endl;
                }
                return yy::parser::make_IDENTIFIER(yytext, loc);
                // When we pass yytext here, a copy std::string is made from all characters up until \0
                // In the yy::parser::make_IDENTIFIER function we return the result of symbol_type's constructor
                // 'symbol_type' is derived from 'basic_symbol<by_kind>' which is typedefed as 'super_type'
                // This makes me wonder why we don't assign the whole file suffix to our identifier
           }

  /* That's a dot */
.          {
                throw yy::parser::syntax_error(loc, "invalid character: " + std::string(yytext));
           }

<<EOF>>    return yy::parser::make_END (loc);

%%
/* This ends the token definition section */

/* And here we have the definition of the function discussed above */
yy::parser::symbol_type make_NUMBER(
  const std::string &s,
  const yy::parser::location_type& loc
) {
  errno = 0;
  long n = strtol(s.c_str(), NULL, 10);
  if (! (INT_MIN <= n && n <= INT_MAX && errno != ERANGE))
    throw yy::parser::syntax_error(loc, "integer is out of range: " + s);
  return yy::parser::make_NUMBER((int) n, loc);
}